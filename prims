#include <iostream>
#include <limits.h>
#define vertices 5
using namespace std;
int minKey(int k[], bool mst[])
{
    int minimum = INT_MAX, min;


    for (int i = 0; i < vertices; i++)
    {
        if (mst[i] == false && k[i] < minimum)
        {
            minimum = k[i];
            min = i;
        }
    }
    return min;
}
void prim(int graph[vertices][vertices])
{
    bool mst[vertices];
    int k[vertices];
    int parent[vertices];
    for (int i = 0; i < vertices; i++)
    {
        k[i] = INT_MAX;
        mst[i] = false;
    }
    k[0] = 0;
    parent[0] = -1;
    for (int count = 0; count < vertices - 1; count++)
    {
        int edge = minKey(k, mst);
        mst[edge] = true;
        for (int v = 0; v < vertices; v++)
        {
            if (graph[edge][v] && mst[v] == false && graph[edge][v] < k[v])
            {
                parent[v] = edge;
                k[v] = graph[edge][v];
            }
        }
    }
    cout << "Edge\tWeight" << endl;
    for (int i = 1; i < vertices ; i++)
    {
        cout << parent[i] << "<->" << i << "\t" << graph[i][parent[i]] << endl;
    }
}


int main()
{


    int g[vertices][vertices] = {
        {0, 0, 3, 0, 0},
        {0, 0, 10, 4, 0},
        {3, 10, 0, 2, 6},
        {0, 4, 2, 0, 1},
        {0, 0, 6, 1, 0},
    };
    prim(g);
    return 0;
}
//O(v^2)
